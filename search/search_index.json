{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyDashboard","text":"<p>PyDashboard is a modular, easily extensible terminal dashboard entirely built in Python using Textual, a framework built by Textualize.io.</p> <p>It's inspired to projects like WTFutil (from which borrows the configuration file structure)  but brings to the table new essential features like user plugins and remote connections.</p> <p>This project is still in developement and may be missing many important modules, you are welcome to make your own and submit them.</p> <p>Jump to the Installation section to start using PyDashboard now or explore the Modules section to discover available modules.</p> <p></p> <p>PyDashboard running on a home server.</p>"},{"location":"config_file/","title":"Configuration file","text":"<p>PyDashboard config file (refer to Getting stated for file location) contains all the settings of the modules and their positions on the screen. The syntax of the file is YAML (What is YAML?).</p> <p>Configuration has four main sections, the example below can be used as a starting point for  building your own configuration file. <pre><code>ansi_color: false\ndefaults:\n  border: [\"round\", \"cyan\"]\n  title_color: lightgreen\n  refresh_interval: 1\ngrid:\n  columns: [10, 10, 10, 10]\n  rows: [9, 7, 3, 7, 5]\nmods:\n  clock:\n    position:\n      top: 0\n      left: 3\n      height: 1\n      width: 1\n</code></pre></p> <p>Note</p> <p>Keys can be written both in <code>camelCase</code> and <code>snake_case</code> and are case-insensitive (<code>bORdeR</code> is the same as <code>border</code>).</p>"},{"location":"config_file/#modules-and-widgets","title":"Modules and widgets","text":"<p>PyDashboard provides several modules, each one can be loaded to be displayed in a widget. Usually, when you want to place a new widget, you just need to add a new entry with the module name under the <code>mods:</code> section.</p> <p>Sometimes you may need to add multiple widgets based on the same module (for example multiple  <code>cmdrunner</code> widgets), in these cases you can use another name as key of the entry and then specify the module type in the configuration of the widget. <pre><code># ...\nmods:\n  # ...\n  custom_module_one:\n    # ...\n    type: cmdrunner\n  custom_module_two:\n    # ...\n    type: cmdrunner\n</code></pre></p> <p>If you don't like this syntax because it's too much verbose, you can also append a <code>%</code> to the module name, followed by a custom name or identifier (it can even be only a number).</p> <pre><code># ...\nmods:\n  # ...\n  cmdrunner%module_one:\n    # ...\n  cmdrunner%module_two:\n    # ...\n</code></pre> <pre><code># ...\nmods:\n  # ...\n  cmdrunner%1:\n    # ...\n  cmdrunner%2:\n    # ...\n</code></pre>"},{"location":"config_file/#positioning","title":"Positioning","text":"<p>The terminal can be considered like a screen with pixels, but in this case the \"pixels\" are  the individual characters, for example a 80x50 terminal means 80 characters wide and 50 characters tall.</p> <p>Getting terminal size</p> <p>To know the size of the terminal that will host PyDashboard run <code>stty -a</code>.  The first row will output the required information. <pre><code>speed 38400 baud; rows 50; columns 160; line = 0;\nintr = ^C; quit = ^\\; erase = ^?; kill = ^U; eof = ^D; eol = &lt;undef&gt;; eol2 = &lt;undef&gt;; swtch = &lt;undef&gt;; start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R; werase = ^W; lnext = ^V; discard = ^O; min = 1; time = 0;\n-parenb -parodd -cmspar cs8 hupcl -cstopb cread -clocal -crtscts\n-ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr -icrnl -ixon -ixoff -iuclc -ixany -imaxbel iutf8\nopost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0\n-isig -icanon -iexten -echo echoe echok -echonl -noflsh -xcase -tostop -echoprt echoctl echoke -flusho -extproc\n</code></pre></p> <p>Using the characters as reference, placing the widgets on the dashboard can be done in two ways:</p> <ul> <li>grid (recommended)</li> <li>windowed</li> </ul> <p>Note</p> <p>Both methods can be used in the same file, but if both are set for a widget at the same time,  the grid takes precedence. </p>"},{"location":"config_file/#grid","title":"Grid","text":"<p>This method splits the screen in chunks of characters. <pre><code>grid:\n  columns: [10, 10, 10, 10]\n  rows: [5, 7, 3]\n</code></pre> This example splits the screen in 4 columns of 10 characters each and 3 rows of 5, 7 and 3 characters respectively, starting from the top left corner of the screen, the remaining space is left unused. <pre><code>----------------------------------------\n|        ||        ||        ||        |\n|    1   ||    2   ||    3   ||    4   |\n|        ||        ||        ||        |\n----------------------------------------\n----------------------------------------\n|        ||        ||        ||        |\n|        ||        ||        ||        |\n|    5   ||    6   ||    7   ||    8   |\n|        ||        ||        ||        |\n|        ||        ||        ||        |\n----------------------------------------\n----------------------------------------\n|    9   ||   10   ||   11   ||   12   |\n----------------------------------------\n</code></pre> As you can see the effective size of each widget is smaller than the specified size due to the border, this behaviour can be controlled by setting the border.</p> <p>Back to the example above, let's place the clock: inside the <code>mods:</code> section we define a <code>clock:</code> section with a <code>position:</code> section that requires 4 parameters: <pre><code># ...\nmods:\n  # ...\n  clock:\n    position:   #place the widget in the square number 4\n      top: 0    #first row\n      left: 3   #fourth column\n      height: 1\n      width: 1\n  # ...\n</code></pre></p> <p>If you have a widget that you want to span across multiple rows/columns choose the first square and then define height and width:</p> 1x11x22x12x2 <pre><code>----------------------------------------\n|        ||        ||        ||        |\n|  Clock ||    2   ||    3   ||    4   |          position:\n|        ||        ||        ||        |            top: 0\n----------------------------------------            left: 0\n----------------------------------------            height: 1\n|        ||        ||        ||        |            width: 1\n|        ||        ||        ||        |\n|    5   ||    6   ||    7   ||    8   |\n|        ||        ||        ||        |\n|        ||        ||        ||        |\n----------------------------------------\n----------------------------------------\n|    9   ||   10   ||   11   ||   12   |\n----------------------------------------\n</code></pre> <pre><code>----------------------------------------\n|                  ||        ||        |\n|      Clock       ||    3   ||    4   |          position:\n|                  ||        ||        |            top: 0\n----------------------------------------            left: 0\n----------------------------------------            height: 1\n|        ||        ||        ||        |            width: 2\n|        ||        ||        ||        |\n|    5   ||    6   ||    7   ||    8   |\n|        ||        ||        ||        |\n|        ||        ||        ||        |\n----------------------------------------\n----------------------------------------\n|    9   ||   10   ||   11   ||   12   |\n----------------------------------------\n</code></pre> <pre><code>----------------------------------------\n|        ||        ||        ||        |\n|        ||    2   ||    3   ||    4   |          position:\n|        ||        ||        ||        |            top: 0\n|        |------------------------------            left: 0\n|  Clock |------------------------------            height: 2\n|        ||        ||        ||        |            width: 1\n|        ||        ||        ||        |\n|        ||    6   ||    7   ||    8   |\n|        ||        ||        ||        |\n|        ||        ||        ||        |\n----------------------------------------\n----------------------------------------\n|    9   ||   10   ||   11   ||   12   |\n----------------------------------------\n</code></pre> <pre><code>----------------------------------------\n|                  ||        ||        |\n|                  ||    3   ||    4   |          position:\n|                  ||        ||        |            top: 0\n|                  |--------------------            left: 0\n|                  |--------------------            height: 2\n|      Clock       ||        ||        |            width: 2\n|                  ||        ||        |\n|                  ||    7   ||    8   |\n|                  ||        ||        |\n|                  ||        ||        |\n----------------------------------------\n----------------------------------------\n|    9   ||   10   ||   11   ||   12   |\n----------------------------------------\n</code></pre>"},{"location":"config_file/#windowed","title":"Windowed","text":"<p>If you prefer working directly with widget sizes and absolute coordinates you can use the <code>window:</code>  section instead of <code>position:</code>, this enables you to place widgets with more freedom easily, even overlapping them if you wish.</p> <p><code>window:</code> requires the following parameters: <pre><code># ...\nmods:\n  # ...\n  clock:\n    window:\n      y: 5\n      x: 13\n      w: 20\n      h: 7\n  # ...\n</code></pre> Producing this result: <pre><code>             |\n             |\n           y |\n             |\n     x      \\ /\n-----------&gt; *-------------------\n             |                  |  \n             |                  |\n             |       Clock      | h\n             |                  |\n             |                  |\n             --------------------\n                       w\n</code></pre></p>"},{"location":"config_file/#defaults-and-common-settings","title":"Defaults and common settings","text":"<p>When applying certain settings, for example styles, you may need apply the same settings to every widget without having to repeat them many times across the file.</p> <p>In the <code>defaults:</code> section you can define default values for each parameter accepted by a widget, then, when  initializing it, settings will be evaluated in this order (first takes precedence):</p> <ol> <li> <p>widget specific settings <pre><code># ...\nmods:\n  # ...\n  clock:\n    border: [\"double\", \"green\"]\n  # ...\n</code></pre></p> </li> <li> <p><code>defaults:</code> <pre><code>defaults:\n  border: [\"round\", \"cyan\"]\n</code></pre></p> </li> <li> <p>default values defined in module code. See BaseModule <pre><code>def __init__(\n    ...\n    border: ... = (\"round\", \"white\"),\n    ...\n)\n</code></pre></p> </li> </ol> <p>This example sets the default border to round, cyan, the title color to green and the refresh interval to 1 second <pre><code>defaults:\n  border: [\"round\", \"cyan\"]\n  title_color: lightgreen\n  refresh_interval: 1\n</code></pre></p>"},{"location":"config_file/#color-scheme","title":"Color scheme","text":"<p>When running PyDashboard in a TTY without a graphical terminal, some colors may appear wrong due to different color schemes settings between GUI terminals (for example KDE Konsole) and the kernel text mode (the one used in systems without a GUI, like Ubuntu Server).</p> <p>To fix this problem you can set <code>ansi_color: true</code> in the configuration.</p> <p></p> <p><code>ansi_color: false</code></p> <p></p> <p><code>ansi_color: true</code></p> <p>Notice how red in ResourceUsage became magenta and yellow in NUT became orange with <code>ansi_color: false</code>.</p> <p>This fix is not needed if PyDashboard is running in a GUI terminal, as it supports extended ANSI colors and this setting effectively does nothing, except for using the terminal background rather than painting it all black.</p> <p></p> <p><code>ansi_color: false</code></p> <p></p> <p><code>ansi_color: true</code></p> <p>See: Textual App Basics - ANSI Colors</p>"},{"location":"getting_started/","title":"Installation","text":"<p>Compatibility</p> <p>PyDashboard has been developed and tested only on Linux based systems and is not guaranteed to work on Windows nor macOS due to some modules being heavily dependent on Linux specific programs/commands.</p> <p>If not already present, install pipx following the official guide. To install pipx on Ubuntu 23.04 or above run: <pre><code>sudo apt update\nsudo apt install pipx\npipx ensurepath\n# optional to allow pipx actions with --global argument\nsudo pipx ensurepath --global\n</code></pre></p> <p>Then you can install PyDashboard using the command below: <pre><code>pipx install pydashboard\n</code></pre></p>"},{"location":"getting_started/#libvirt","title":"libvirt","text":"<p>If you want to use the libvirt module you have to install <code>libvirt-dev</code> and then install <code>pydashboard[libvirt]</code> instead of <code>pydashboard</code>.</p> <p>On Ubuntu you can run: <pre><code>sudo apt install libvirt-dev gcc python3-dev\npipx install pydashboard[libvirt]\n</code></pre></p>"},{"location":"getting_started/#running","title":"Running","text":"<p>Once installed you can run PyDashboard using: <pre><code>pydashboard &lt;path/to/config.yml&gt;\n</code></pre></p>"},{"location":"getting_started/#command-line-arguments","title":"Command line arguments","text":""},{"location":"getting_started/#configyml","title":"<code>config.yml</code>","text":"<p>Path to the configuration file. Defaults to <code>$HOME/.config/pydashboard/config.yml</code>.</p>"},{"location":"getting_started/#-log-path","title":"<code>--log &lt;path&gt;</code>","text":"<p>Specify log folder, if not specified the log folder will be created  in <code>$HOME/.log/pydashboard</code>, if an exception occurs will be created in the same folder where the configuration file is stored.</p>"},{"location":"getting_started/#-debug","title":"<code>--debug</code>","text":"<p>Enables debug logging</p>"},{"location":"advanced/autostart/","title":"Autostart on boot","text":"<p>This little guide will allow you to configure PyDashboard to run on startup on systems without a GUI (like Ubuntu Server).</p> <p>Note</p> <p>This guide has been written after tests on both Ubuntu Server 22.04 and 24.04 with different programs, PyDashboard has been run only on Ubuntu Server 24.04 at the moment of writing.</p> <p>Warning</p> <p>This guide takes for granted:     - you have already installed and configured PyDashboard once     - you are using Ubuntu Server 24.04 or another distro that uses <code>systemd</code></p>"},{"location":"advanced/autostart/#1-terminal-size","title":"1. Terminal size","text":"<p>First of all, we need to make sure the columns and rows of the grid are correct.</p> <p>Login using one of the TTYs and run <code>stty -a</code>.</p> <p></p> <p>The first row of the output contains the important information, note the numbers of rows and columns.</p> <p>From now, it's recommended to work via SSH, as it will be easier to copy-paste commands and text. </p>"},{"location":"advanced/autostart/#2-configuration-file","title":"2. Configuration file","text":"<p>If you plan to use the grid, open the configuration file with your favourite text editor and create an adequate number of rows and columns so that their total heights and widths sum up to the total number of characters available.</p> <p>For example: <pre><code>nano ~/.config/pydasboard/config.yml\n</code></pre></p> <pre><code>grid:\n  columns: [37, 7, 30, 15, 24, 16, 31]\n  rows: [9, 7, 3, 7, 5, 3, 4, 6, 1, 5]\n</code></pre>"},{"location":"advanced/autostart/#3-systemd-service","title":"3. Systemd service","text":"<p>Create a new systemd unit file </p> <pre><code>sudo nano /etc/systemd/system/pydashboard.service\n</code></pre> <p>and paste this content</p> <p>Change USER to the actual name of the user that will run PyDashboard.</p> /etc/systemd/system/pydashboard.service<pre><code>[Unit]\nDescription=PyDashboard\nAfter=multi-user.target \n\n[Service]\nUser=USER\n\nPAMName=login\nTTYPath=/dev/tty8\nStandardInput=tty\nStandardOutput=tty\n\nUtmpIdentifier=tty8\nUtmpMode=user\n\nExecStartPre=/usr/bin/chvt 8\nExecStartPre=+/usr/bin/dmesg -D\nExecStart=/home/USER/.local/bin/pydashboard\nRestart=always\nRestartSec=3\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Enable and start the service <pre><code>sudo systemctl enable pydashboard.service\nsudo systemctl start pydashboard.service\n</code></pre></p> <p>PyDashboard should start on the screen, if you notice some colors are wrong check this fix.</p> <p></p>"},{"location":"advanced/plugins/","title":"Plugins","text":"<p>from pydashboard.containers import TableModuleStarting with version 1.1.0, PyDashboard supports plugins, following this guide you can easily make your own script to extend PyDashboard functionalities.</p> <p>Tip</p> <p>Since plugins are built exactly as integrated modules, you can follow the guide also if you want to contribute to PyDashboard with a pull request to publish your custom modules. Just remember to make appropriate documentation for them.</p> <p>To start building a plugin you need to set up the development environment:</p> <pre><code>sudo apt install python3-virtualenv\nvirtualenv .venv\nsource .venv/bin/activate\npip install pydashboard\n</code></pre>"},{"location":"advanced/plugins/#printing-to-the-screen","title":"Printing to the screen","text":"<p>The most basic plugin should be able to print something inside its box each time it gets updated. To do this you have to implement the <code>__call__</code> method.</p> <p>Each module should subclass one of the available containers, either BaseModule or TableModule. For this simple example we choose to subclass BaseModule.</p> helloworld.py<pre><code>from pydashboard.containers.basemodule import BaseModule\n\n\nclass HelloWorld(BaseModule):\n    def __call__(self):\n        return \"Hello, World!\"\n</code></pre> <p>This method can return either a string with optional markup or a Rich Text object.</p> <p>To implement PyDashboard modular architecture each module should end defining a variable named <code>widget</code> that holds the reference to the class just implemented.</p> helloworld.py<pre><code>from pydashboard.containers.basemodule import BaseModule\n\n\nclass HelloWorld(BaseModule):\n    def __call__(self):\n        return \"Hello, World!\"\n\n\n# DO NOT instantiate the class here\nwidget = HelloWorld\n</code></pre> <p>Tip</p> <p>Using a variable to hold the class reference means that the class itself could be named <code>widget</code> and everything would work the same. It's true, but calling each module <code>widget</code> would be ugly to read in the source code and a nightmare to quickly find useful information in the logs.</p> <p>Luckily you have free will and can decide yourself what you prefer.</p> <p>Save this file as <code>helloworld.py</code> everywhere you want and add these lines to your configuration file inside the <code>mods:</code> section.</p> config.yml<pre><code>mods:\n  # ...\n  helloworld:\n    type: plugin\n    mpath: /absolute/path/to/helloworld.py\n    refresh_interval: 5s\n    position: #change as needed\n      top: 0\n      left: 0\n      height: 1\n      width: 1\n</code></pre> <p>Start PyDashboard as usual and your new module should appear on the screen where you placed it.</p>"},{"location":"advanced/plugins/#updating-content","title":"Updating content","text":"<p>Feels a bit static, doesn't it? Let's extend the example to change the content at each update.</p> beers.py<pre><code>from pydashboard.containers.basemodule import BaseModule\n\nfrom random import randint\n\n\nclass Beers(BaseModule):\n\n    def __call__(self):\n        return f\"Hello, Bartender! Give me {randint(2, 10)} beers.\"\n\n\nwidget = Beers\n</code></pre>"},{"location":"advanced/plugins/#styling","title":"Styling","text":"<p>When updating the widget, you can also update its title, subtitle and style. For example let's make a simple module that gets three random numbers and sets two of them as the title and subtitle, and the third as the widget content, we also set the subtitle text color to red.</p> randomizer.py<pre><code>from pydashboard.containers.basemodule import BaseModule\n\nfrom random import randint\n\n\nclass Randomizer(BaseModule):\n\n    def __call__(self):\n        self.border_title = str(randint(100, 1000))\n        self.border_subtitle = str(-randint(100, 1000))\n        self.set('styles.border_subtitle_color', 'red')\n        return str(randint(1, 100))\n\n\nwidget = Randomizer\n</code></pre> <p>These are all the attributes of the module you can set using:</p> <pre><code>self.set(attribute, value)\n</code></pre> Attribute Type Description <code>'styles.align_horizontal'</code> <code>Literal['left', 'center', 'right', 'justify']</code> Horizontal alignment of the text <code>'styles.align_vertical'</code> <code>Literal['top', 'middle', 'bottom']</code> Vertical alignment of the text <code>'styles.color'</code> <code>str</code> Color of the text <code>'styles.border'</code> <code>tuple[str]</code> Border of the widget <code>'border_title'</code> <code>str</code> Title of the widget <code>'styles.border_title_align'</code> <code>Literal['left', 'center', 'right', 'justify']</code> Alignment of the title <code>'styles.border_title_background'</code> <code>str</code> Background color of the title <code>'styles.border_title_color'</code> <code>str</code> Color of the title <code>'styles.border_title_style'</code> <code>str</code> Style of the title <code>'border_subtitle'</code> <code>str</code> Subtitle of the widget <code>'styles.border_subtitle_align'</code> <code>Literal['left', 'center', 'right', 'justify']</code> Alignment of the subtitle <code>'styles.border_subtitle_background'</code> <code>str</code> Background color of the subtitle <code>'styles.border_subtitle_color'</code> <code>str</code> Color of the subtitle <code>'styles.border_subtitle_style'</code> <code>str</code> Style of the subtitle <p>If you let the user choose colors/styles and then you want to temporarily change them, you can make use of the <code>self.reset_settings(attribute)</code> function to restore the default/user values:</p> <pre><code>self.reset_settings('styles.border_subtitle_color')\n</code></pre> <p>The example above resets the subtitle color to the default/user settings.</p> <p>Note</p> <p>You can explore other configurations for the widget by reading the Textual Styles Reference but be careful because setting attributes directly without <code>self.set</code> won't work over SSH.</p>"},{"location":"advanced/plugins/#module-initialization","title":"Module initialization","text":"<p>Sometimes you may need to run some code only when initializing the module, for example to authenticate for a service, or to make calculations based on widget sizes, that you can get only after initialization.</p> <p>PyDashboard provides you the <code>__init__</code> and <code>__post_init__</code> methods. When choosing which one to use, please read the following table to choose which one best suits your needs, for long-running code it's better to use the latter.</p> <code>__init__</code> <code>__post_init__</code> Runs in main thread, before full widget graphical initialization. Long initialization tasks will delay all interface initialization. Runs in a separate thread, after module graphical initialization (i.e.: widget is aware of its size at this moment). Only handles import exceptions, an unhandled exception crashes the entire program. Handles every exception, an unhandled exception will produce a notification and a log record, without crashing the entire program. Runs locally and over SSH. Runs on the remote computer if working over SSH. Can define new configuration parameters. No need to mess with module configuration parameters."},{"location":"advanced/plugins/#__init__","title":"<code>__init__</code>","text":"<p>Use this method if you want to add configuration parameters to the module or to transform the parameters passed to the super class. greeter.py<pre><code>from pydashboard.containers.basemodule import BaseModule\n\n\nclass Greeter(BaseModule):\n    def __init__(self, *, name: str, **kwargs):\n        # DO NOT FORGET to call the init method of the super class.\n        # Pass to it EVERY parameter, \n        # even the ones you are adding, \n        # to allow them to be passed to the server \n        # in the event of a remote connection.\n        super().__init__(name=name, **kwargs)\n        self._name = name\n\n    def __call__(self):\n        return f\"Hello, {self._name}!\"\n\nwidget = Greeter\n</code></pre></p> <p>Warning</p> <p>When calling <code>super().__init__</code>, always remember to call it as soon as possible inside the <code>__init__</code> method.</p> <p>Also pass to it every new parameter you are defining, this is important to make the module work when using the remote connection feature.</p>"},{"location":"advanced/plugins/#__post_init__","title":"<code>__post_init__</code>","text":"<p>Use this method to perform long-running initialization tasks, such as authentication, and graphic interface calculations.</p> <p>Here are two examples from QBitTorrent and NUT modules.</p> Source code in src/pydashboard/modules/qbittorrent.py<pre><code>    def __post_init__(self):\n        self.session = Session()\n        try:\n            self.session.post(self.url,\n                              data={\"username\": self.username, \"password\": self.password},\n                              headers={'Referer': self.referer})\n        except ConnectionError as e:\n            self.border_subtitle = f'ConnectionError'\n            self.styles.border_subtitle_color = 'red'\n            self.logger.critical(str(e))\n</code></pre> Source code in src/pydashboard/modules/nut.py<pre><code>    def __post_init__(self, content_size: Size):\n        self.bars, self.lbar, self.rbar = calc_bars_sizes(content_size[1], self.bars)\n</code></pre>"},{"location":"advanced/plugins/#content-size","title":"Content size","text":"<p>In the last example above you can notice how the <code>__post_init__</code> method has a second argument of type <code>Size</code>, this argument is a tuple <code>(height, width)</code> that represents the available content size without the borders.</p> <p>To get the content size you just need to add an argument in <code>__call__</code> and/or <code>__post_init__</code> of type <code>Size</code> calling it whatever you want, it will be BaseModule's duty to automatically pass the required argument.</p> mysize.py<pre><code>from pydashboard.containers import BaseModule\nfrom pydashboard.utils.types import Size\n\n\nclass MySize(BaseModule):\n    def __call__(self, size: Size):\n        return f\"This box is {size[0]} characters tall and {size[1]} characters wide\"\n\nwidget = MySize\n</code></pre>"},{"location":"advanced/plugins/#missing-dependencies","title":"Missing dependencies","text":"<p>If your plugin requires dependencies not installed when installing PyDashboard, you can inject them using: <pre><code>pipx inject pydashboard [dependencies ...]\n</code></pre></p>"},{"location":"advanced/plugins/#table-based-plugins","title":"Table based plugins","text":"<p>When creating a plugin you can also make use of the <code>TableModule</code> base class instead of <code>BaseModule</code>.</p> <p>Everything explained above is still valid, but this time the <code>__call__</code> method requires you to return a pandas Dataframe.</p> <p><code>TableModule</code> also allows you to set various class attributes to customize how the table is shown. Set one or more of the following class attributes. <pre><code>from pydashboard.containers.tablemodule import TableModule \n\n\nclass MyTable(TableModule):\n    column_names = ...\n    humanize = ...\n    justify = ...\n    colorize = ...\n</code></pre></p>"},{"location":"advanced/plugins/#column_names","title":"<code>column_names</code>","text":"<p>Type: <code>dict[str, str]</code></p> <p>Maps column names from the DataFrame to more human friendly names, if a key is missing will be used the column name from the dataframe.</p>"},{"location":"advanced/plugins/#humanize","title":"<code>humanize</code>","text":"<p>Type: <code>dict[str, Callable]</code></p> <p>Maps column names from the DataFrame to functions used to transform the content of a column in a human friendly string,  if a key is missing no transformation is applied.</p>"},{"location":"advanced/plugins/#justify","title":"<code>justify</code>","text":"<p>Type: <code>dict[str, Literal[\"default\", \"left\", \"center\", \"right\", \"full\"] | None]</code></p> <p>For each column name specifies the justification direction, if a key is missing the default is <code>left</code>.</p>"},{"location":"advanced/plugins/#colorize","title":"<code>colorize</code>","text":"<p>Type: <code>dict[str, Callable]</code></p> <p>Maps column names from the DataFrame to functions used to colorize the content of a column, if a key is missing no transformation is applied.</p>"},{"location":"advanced/plugins/#remote-connection","title":"Remote connection","text":"<p>PyDashboard supports running modules on a remote machine and getting the result on the machine running the dashboard, however plugin modules over remote connections are not officially supported yet, to make them work you have to use a little hack.</p> <p>The plugin module is only a temporary module that gets replaced as soon as the custom module is loaded, so is not able to transfer the script on the remote machine, because any reference to the plugin path is loss when it is initialized.</p> <p>To make the plugin work over remote connection:</p> <ol> <li>on both the main machine running PyDashboard and the remote one running PyDashboard Server place the plugin inside     <pre><code>/home/USER/.local/share/pipx/venvs/pydashboard/lib/python3.13/site-packages/pydashboard/modules/\n</code></pre>     Remember to change <code>USER</code> with your username, also <code>site-packages</code> might be inside another folder depending on the      Python version installed inside the virtual environment.</li> <li>Load the plugin in the config file like any other integrated module.</li> </ol> <p>Warning</p> <p>This hack modifies a folder that normally shouldn't be modified, adding files to it means they might be removed/altered when updating PyDashboard. Make sure to always have a copy of the files added and be prepared to restore them (following the procedure above) when you update PyDashboard.</p>"},{"location":"advanced/remote_connection/","title":"Remote connection","text":"<p>A key feature of PyDashboard is the ability to connect remotely to another computer running PyDashboard to run the module backend on the remote computer and display the widget on the local computer. You can even have multiple widget getting content from the same remote computer and/or multiple remote computers.</p> <p>Each module supports the following parameters to set up an SSH connection to a computer running PyDashboard server:</p> Parameter Description remote_host Remote host IP or FQDN remote_port Remote host SSH port remote_username Remote host SSH username remote_password Remote host SSH password (see note below) remote_key Remote host SSH key ssh_strict_host_key_checking Control host key verification behaviour ssh_ignore_known_hosts_file Ignore known hosts file (suppresses host key changed warning) <p>Danger: security risk</p> <p>Saving passwords (<code>remote_password</code>) in the configuration file is strongly discouraged and should be avoided unless key based authentication is not possible, in such cases <code>sshpass</code> needs to be installed, and it's recommended to save the  configuration file not world-readable: <pre><code>chmod 700 .config/pydashboard/config.yml\n</code></pre></p> <p>For the purpose of this guide we will be calling <code>server</code> the remote computer running PyDashboard server, that will be providing data to the computer running PyDashboard and displaying the widgets on its screen, that will be called <code>client</code>.</p>"},{"location":"advanced/remote_connection/#autostart-on-servers","title":"Autostart on servers","text":""},{"location":"advanced/remote_connection/#1-users-preparation","title":"1. Users preparation","text":"<p>To set up remote connection it's suggested to have an unprivileged user on the server that can be used to connect  to the server itself.</p> <p>The following commands will present a title to tell if they have to be run on the server(s) or on the client. </p> client<pre><code>#replace USER with your current user on the server\nscp $(ls -dt \"${HOME}\"/.ssh/id*.pub 2&gt;/dev/null | grep -v -- '-cert.pub$' | head -n 1) USER@server:client_id.pub\n</code></pre> <p>Note</p> <p>If the command above returns <pre><code>usage: scp [-346ABCOpqRrsTv] [-c cipher] [-D sftp_server_path] [-F ssh_config]\n           [-i identity_file] [-J destination] [-l limit] [-o ssh_option]\n           [-P port] [-S program] [-X sftp_option] source ... target\n</code></pre> this means that your user has not a key file and you have to create one.  To do it just run <code>ssh-keygen</code> accepting the default settings.</p> server<pre><code># create a user specifically for pydashboard \nsudo useradd --create-home --shell /bin/bash pydashboard\n#create .ssh directory to save authorized_keys file\nsudo mkdir -p /home/pydashboard/.ssh\n# copy the ssh key from the current user to pydashboard user authorized keys \ncat client_id.pub | sudo tee -a /home/pydashboard/.ssh/authorized_keys &gt; /dev/null\n# remove the temporary file\nrm client_id.pub\n</code></pre> <p>Note</p> <p>If you plan to use <code>docker</code> and/or <code>libvirt</code> modules make sure to set appropriate permissions to the pydashboard user on the server: <pre><code>sudo addgroup docker\nsudo adduser pydashboard docker\n\nsudo addgroup libvirt\nsudo adduser pydashboard libvirt\n</code></pre></p>"},{"location":"advanced/remote_connection/#2-installation","title":"2. Installation","text":"<p>For installation refer to Getting started. </p> <p>Note</p> <p>~~If at least one of the servers will be using the module libvirt, remember to  install <code>pydashboard[libvirt]</code> on both che client and the server needing that module, other servers are not affected.~~ Starting from version 1.2.0 you don't need anymore to install libvirt library on the client if you only plan to run the module on the servers.</p>"},{"location":"advanced/remote_connection/#3-systemd-unit","title":"3. Systemd unit","text":"<p>On each server create a new systemd unit file</p> <pre><code>sudo nano /etc/systemd/system/pydashboard-server.service\n</code></pre> <p>and paste this content /etc/systemd/system/pydashboard-server.service<pre><code>[Unit]\nDescription=PyDashboard server\nAfter=multi-user.target \n\n[Service]\nEnvironment=\"PYTHONUNBUFFERED=1\"\nUser=pydashboard\nExecStart=/home/pydashboard/.local/bin/pydashboard-server\nRestart=always\nRestartSec=3\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> <p>Enable and start the service <pre><code>sudo systemctl enable pydashboard-server.service\nsudo systemctl start pydashboard-server.service\n</code></pre></p>"},{"location":"advanced/remote_connection/#client-connection","title":"Client connection","text":"<p>On the client, in the configuration file, for each widget you want to get data from the server, add the parameter <code>remote_host: pydashboard@&lt;ip_addr&gt;</code>.</p> Full example<pre><code>mods:\n  resourceusage%pc2:\n    remote_host: 192.168.1.4\n    subtitle: PC2\n    position:\n      top: 5\n      left: 0\n      height: 3\n      width: 1\n    cpuCombined: true\n    showCPU: true\n    showMem: true\n    showSwp: false\n    showGPU: true\n    refreshInterval: 5\n</code></pre> <p>If you set up everything correctly and the service on the server has started, you should see the data coming from the server in the widget.</p>"},{"location":"advanced/remote_connection/#ssh-key-verification","title":"SSH key verification","text":"<p>When connecting via SSH, the remote device (host) sends to the one that wants to connect its public key, the computer starting the conection verifies if it has already seen that host with that key. If the host was never seen before, <code>ssh</code> asks if you want to accept the new key and connect. If the host was already seen but its key changed, a warning is printed on the screen and the connection immediately aborted.</p> <p>Although not recommended, PyDashboard can handle these cases for you by setting</p> <ul> <li> <p>ssh_strict_host_key_checking:     Can be set to <code>null</code>, <code>true</code>, <code>false</code> or <code>accept-new</code>.    If set to <code>false</code> or <code>accept-new</code> new hosts will be added to known hosts without complaining.   See StrictHostKeyChecking</p> </li> <li> <p>ssh_ignore_known_hosts_file:    Even after setting <code>ssh_strict_host_key_checking: accept-new</code> or <code>ssh_strict_host_key_checking: false</code>,   <code>ssh</code> may still display a warning if the host key changed and prohibit you from connecting, if this parameter   is set to <code>true</code> UserKnownHostsFile will be set to <code>/dev/null</code>, meaning no file has to be checked for known hosts.</p> </li> </ul> <p>Danger</p> <p>The settings above could be a security risk if misused and should be avoided where possible.</p>"},{"location":"advanced/remote_connection/#stricthostkeychecking","title":"StrictHostKeyChecking","text":"<p>Source: man ssh_config(5)</p> <p>If this flag is set to yes, ssh(1) will never automatically add host keys to the ~/.ssh/known_hosts file, and refuses to connect to hosts whose host key has changed. This provides maximum protection against man-in- the-middle (MITM) attacks, though it can be annoying when the /etc/ssh/ssh_known_hosts file is poorly maintained or when connections to new hosts are frequently made. This option forces the user to manually add all new hosts.</p> <p>If this flag is set to accept-new then ssh will automatically add new host keys to the user's known_hosts file, but will not permit connections to hosts with changed host keys.</p> <p>If this flag is set to no or off, ssh will automatically add new host keys to the user known hosts files and allow connections to hosts with changed hostkeys to proceed, subject to some restrictions.</p> <p>If this flag is set to ask (the default), new host keys will be added to the user known host files only after the user has confirmed that is what they really want to do, and ssh will refuse to connect to hosts whose host key has changed. The host keys of known hosts will be verified automatically in all cases.</p> ssh Python yaml (configuration file) <code>yes</code> <code>True</code> <code>yes</code>/<code>true</code>/<code>on</code> <code>accept-new</code> <code>'accept-new'</code> <code>accept-new</code> <code>no</code>/<code>off</code> <code>False</code> <code>no</code>/<code>false</code>/<code>off</code> <code>ask</code> <code>None</code> <code>null</code> (or not set)"},{"location":"advanced/remote_connection/#userknownhostsfile","title":"UserKnownHostsFile","text":"<p>Source: man ssh_config(5)</p> <p>Specifies one or more files to use for the user host key database, separated by whitespace.  Each filename may use tilde notation to refer to the user's home directory, the tokens described in the \u201cTOKENS\u201d section and environment variables as described in the \u201cENVIRONMENT VARIABLES\u201d section.  A value of none causes ssh(1) to ignore any user-specific known hosts files.  The default is ~/.ssh/known_hosts, ~/.ssh/known_hosts2.</p>"},{"location":"advanced/remote_connection/#uninstalling-from-server","title":"Uninstalling from server","text":"<pre><code>sudo systemctl stop pydashboard-server.service\nsudo systemctl disable pydashboard-server.service\nsudo rm /etc/systemd/system/pydashboard-server.service\nsudo deluser pydashboard --remove-home\n</code></pre>"},{"location":"containers/basemodule/","title":"BaseModule","text":"<p>This is the base class for all the modules used in the dashboard,  every parameter defined here is accepted by all the modules unless  otherwise specified.</p>"},{"location":"containers/basemodule/#basemodule.BaseModule","title":"<code>BaseModule</code>","text":"PARAMETER DESCRIPTION <code>enabled</code> <p>Enable/disable the widget  TYPE: <code>bool</code> DEFAULT: <code>True</code></p> <p> </p> <code>refresh_interval</code> <p>How often to update module data, accepts a value in seconds or string with a time unit.                 <code>never</code>, <code>0</code>, <code>false</code>, <code>off</code>, <code>no</code>, <code>null</code> disable updating.</p> <p> TYPE: <code>Literal['never'] | int | str | None</code> DEFAULT: <code>None</code> </p> <code>align_horizontal</code> <p>Horizontal alignment of the text</p> <p> TYPE: <code>Literal['left', 'center', 'right', 'justify']</code> DEFAULT: <code>'left'</code> </p> <code>align_vertical</code> <p>Vertical alignment of the text</p> <p> TYPE: <code>Literal['top', 'middle', 'bottom']</code> DEFAULT: <code>'top'</code> </p> <code>color</code> <p>Color of the text</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>border</code> <p>Border of the widget</p> <p> TYPE: <code>tuple[str]</code> DEFAULT: <code>('round', 'white')</code> </p> <code>title</code> <p>Title of the widget</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>title_align</code> <p>Alignment of the title</p> <p> TYPE: <code>Literal['left', 'center', 'right']</code> DEFAULT: <code>'center'</code> </p> <code>title_background</code> <p>Background color of the title</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>title_color</code> <p>Color of the title</p> <p> TYPE: <code>str</code> DEFAULT: <code>'white'</code> </p> <code>title_style</code> <p>Style of the title</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>subtitle</code> <p>Subtitle of the widget</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>subtitle_align</code> <p>Alignment of the subtitle</p> <p> TYPE: <code>Literal['left', 'center', 'right']</code> DEFAULT: <code>'right'</code> </p> <code>subtitle_background</code> <p>Background color of the subtitle</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>subtitle_color</code> <p>Color of the subtitle</p> <p> TYPE: <code>str</code> DEFAULT: <code>'white'</code> </p> <code>subtitle_style</code> <p>Style of the subtitle</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>remote_host</code> <p>Remote host IP or FQDN</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>remote_port</code> <p>Remote host SSH port</p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> <code>remote_username</code> <p>Remote host SSH username</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>remote_password</code> <p>Remote host SSH password</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>remote_key</code> <p>Remote host SSH key</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>ssh_strict_host_key_checking</code> <p>Control host key verification behaviour</p> <p> TYPE: <code>Literal[True, False, 'accept-new'] | None</code> DEFAULT: <code>None</code> </p> <code>ssh_ignore_known_hosts_file</code> <p>Ignore known hosts file (suppresses host key changed warning)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"containers/basemodule/#basemodule.BaseModule--styling","title":"Styling","text":"<p>All the styling parameters shown above directly control the behaviour of Textual framework, the information below is taken from their CSS reference.</p>"},{"location":"containers/basemodule/#basemodule.BaseModule--color","title":"Color","text":"<p>See: Textual <code>&lt;color&gt;</code> Syntax</p> <p>A color should be in one of the following formats:</p> <ul> <li>a recognised named color (e.g., <code>red</code>);</li> <li>a 3 or 6 hexadecimal digit number representing the RGB values of the color (e.g., <code>#F35573</code>);</li> <li>a 4 or 8 hexadecimal digit number representing the RGBA values of the color (e.g., <code>#F35573A0</code>);</li> <li>a color description in the RGB system, with or without opacity (e.g., <code>rgb(23, 78, 200)</code>);</li> <li>a color description in the HSL system, with or without opacity (e.g., <code>hsl(290, 70%, 80%)</code>);</li> </ul>"},{"location":"containers/basemodule/#basemodule.BaseModule--border","title":"Border","text":"<p>See: Textual <code>&lt;border&gt;</code> Syntax</p> <p>Must be passed as a tuple <code>border: [style, color]</code></p> <p><code>style</code> can take any of the following values:</p> Border type Description <code>ascii</code> A border with plus, hyphen, and vertical bar characters. <code>blank</code> A blank border (reserves space for a border). <code>dashed</code> Dashed line border. <code>double</code> Double lined border. <code>heavy</code> Heavy border. <code>hidden</code> Alias for \"none\". <code>hkey</code> Horizontal key-line border. <code>inner</code> Thick solid border. <code>none</code> Disabled border. <code>outer</code> Solid border with additional space around content. <code>panel</code> Solid border with thick top. <code>round</code> Rounded corners. <code>solid</code> Solid border. <code>tall</code> Solid border with additional space top and bottom. <code>thick</code> Border style that is consistently thick across edges. <code>vkey</code> Vertical key-line border. <code>wide</code> Solid border with additional space left and right. <p></p> <p>All border types (taken from Textual border style reference)</p>"},{"location":"containers/basemodule/#basemodule.BaseModule--text-style","title":"Text style","text":"<p>See: Textual <code>&lt;text-style&gt;</code> Syntax</p> <p>Can be the value <code>none</code> for plain text with no styling, or any space-separated combination of the following values:</p> Value Description <code>bold</code> Bold text. <code>italic</code> Italic text. <code>reverse</code> Reverse video text (foreground and background colors reversed). <code>strike</code> Strikethrough text. <code>underline</code> Underline text."},{"location":"containers/tablemodule/","title":"TableModule","text":""},{"location":"containers/tablemodule/#tablemodule.TableModule","title":"<code>TableModule</code>","text":"PARAMETER DESCRIPTION <code>columns</code> <p>A list of columns to show. Default shows all columns.</p> <p> TYPE: <code>list[str]</code> DEFAULT: <code>None</code> </p> <code>show_header</code> <p>Set true to show table header.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>sizes</code> <p>Width (in characters) of each column, 0 fits content. If list is shorted than number     of columns, missing column widths will default to 0.</p> <p> TYPE: <code>list[int]</code> DEFAULT: <code>None</code> </p> <code>sort</code> <p>See Sorting</p> <p> TYPE: <code>str | tuple[str, bool] | list[str | tuple[str, bool]]</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>See BaseModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p>"},{"location":"containers/tablemodule/#sorting","title":"Sorting","text":"<p>Rows can be sorted by a single column name, or by a list of column names, in each case you can choose whether to reverse the sorting order.</p> <ul> <li>Single column <pre><code>sort: column name\n</code></pre></li> <li>Single column, reverse <pre><code>sort: [column name, True]\n</code></pre></li> <li>Multiple columns <pre><code>sort:\n    - column 1\n    - column 2\n    - column 3\n    #...\n</code></pre></li> <li>Multiple columns, reverse <pre><code>sort:\n    - [column 1, false]\n    - [column 2, true]\n    - [column 3, true]\n    - column 4         # equals to [column 4, false]\n    #...\n</code></pre></li> </ul>"},{"location":"modules/apcupsd/","title":"apcupsd","text":""},{"location":"modules/apcupsd/#apcupsd.APCUPSd","title":"<code>APCUPSd</code>","text":"PARAMETER DESCRIPTION <code>title</code> <p>if not set or null defaults to ups model</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>host</code> <p>APCUPSd server address</p> <p> TYPE: <code>str</code> DEFAULT: <code>'localhost'</code> </p> <code>port</code> <p>APCUPSd server port</p> <p> TYPE: <code>int</code> DEFAULT: <code>3551</code> </p> <code>timeout</code> <p>Connection timeout seconds</p> <p> TYPE: <code>int</code> DEFAULT: <code>30</code> </p> <code>bars</code> <p>Whether to show status bars on 1 or 2 lines or automatically ('auto', 0)</p> <p> TYPE: <code>Literal['auto', 0, 1, 2]</code> DEFAULT: <code>0</code> </p> <code>**kwargs</code> <p>See BaseModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p>"},{"location":"modules/clock/","title":"clock","text":""},{"location":"modules/clock/#clock.Clock","title":"<code>Clock</code>","text":"PARAMETER DESCRIPTION <code>font</code> <p> TYPE: <code>Literal['digitalFont', 'bigFont', 'boldFont']</code> DEFAULT: <code>'bigFont'</code> </p> <code>format</code> <p>Format the clock string displayed under the main clock</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>compact</code> <p>Remove spaces from between numbers</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>show_seconds</code> <p>Show seconds in main clock</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>**kwargs</code> <p>See BaseModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p>"},{"location":"modules/cmdrunner/","title":"cmdrunner","text":""},{"location":"modules/cmdrunner/#cmdrunner.CmdRunner","title":"<code>CmdRunner</code>","text":"<p>Run a terminal command, if any of pipe_stdout or pipe_stderr are set, command will be run in a pseudo-terminal (pty).</p> PARAMETER DESCRIPTION <code>args</code> <p> TYPE: <code>str | list[str]</code> </p> <code>pipe_stdout</code> <p>Capture output from stdout</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>pipe_stderr</code> <p>Capture output from stderr</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>wraplines</code> <p>Wrap lines longer than widget width</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>shell</code> <p>Run command in a shell (allows glob expansion, piping and redirection)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>**kwargs</code> <p>See BaseModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p>"},{"location":"modules/diskusage/","title":"diskusage","text":""},{"location":"modules/diskusage/#diskusage.DiskUsage","title":"<code>DiskUsage</code>","text":"PARAMETER DESCRIPTION <code>columns</code> <p>Available columns: <code>device</code>, <code>mountpoint</code>, <code>fstype</code>, <code>opts</code>, <code>total</code>, <code>used</code>, <code>free</code>, <code>percent</code></p> <p> TYPE: <code>list[str]</code> DEFAULT: <code>('device', 'fstype', 'total', 'used', 'free', 'percent', 'mountpoint')</code> </p> <code>sort</code> <p>See Sorting</p> <p> TYPE: <code>str | tuple[str, bool] | list[str | tuple[str, bool]] | None</code> DEFAULT: <code>'mountpoint'</code> </p> <code>exclude</code> <p>Filesystem types to exclude</p> <p> TYPE: <code>list[str]</code> DEFAULT: <code>None</code> </p> <code>human_readable</code> <p>Convert sizes to human readable strings</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>**kwargs</code> <p>See TableModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p>"},{"location":"modules/docker/","title":"docker","text":""},{"location":"modules/docker/#docker.Docker","title":"<code>Docker</code>","text":"<p>Docker module has no specific configuration parameters, see BaseModule.</p> <p>Warning</p> <p>This module needs the user to be in the <code>docker</code> group to get sufficient permissions to connect to docker. If not present yet, the <code>docker</code> group has to be created. <pre><code>sudo addgroup docker\nsudo adduser $(whoami) docker\n</code></pre></p> <p>It's totally fine if the above command produce the following outputs: sudo addgroup docker<pre><code>fatal: The group `docker' already exists.\n</code></pre> sudo adduser $(whoami) docker<pre><code>info: The user `alessandro' is already a member of `docker'.\n</code></pre></p>"},{"location":"modules/feedreader/","title":"feedreader","text":""},{"location":"modules/feedreader/#feedreader.FeedReader","title":"<code>FeedReader</code>","text":"<p>RSS feed reader.</p> PARAMETER DESCRIPTION <code>feeds</code> <p>List of RSS URLs</p> <p> TYPE: <code>list[str]</code> </p> <code>show_source</code> <p>Show feed entry source</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>show_publish_date</code> <p>Show feed entry publish date</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>show_index</code> <p>Show feed entry index</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>limit</code> <p>How many entries to show</p> <p> TYPE: <code>int</code> DEFAULT: <code>20</code> </p> <code>**kwargs</code> <p>See TableModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p>"},{"location":"modules/homeassistant/","title":"homeassistant","text":""},{"location":"modules/homeassistant/#homeassistant.HomeAssistant","title":"<code>HomeAssistant</code>","text":"PARAMETER DESCRIPTION <code>host</code> <p>HomeAssistant server IP or FQDN</p> <p> TYPE: <code>str</code> </p> <code>token</code> <p>HomeAssistant API token</p> <p> TYPE: <code>str</code> </p> <code>filters</code> <p>RegEx string to filter entities</p> <p> TYPE: <code>list[str]</code> </p> <code>port</code> <p>HomeAssistant server port</p> <p> TYPE: <code>int</code> DEFAULT: <code>8123</code> </p> <code>scheme</code> <p>http or https</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https'</code> </p> <code>**kwargs</code> <p>See BaseModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p>"},{"location":"modules/homeassistant/#homeassistant.HomeAssistant--example-filters","title":"Example filters","text":"<p>Show all lights<pre><code>light\\.\n</code></pre> Show all lights except hidden ones<pre><code>light\\.(?!.*_hidden$).*\n</code></pre> Show all binary sensors with `switch` or `button` in their name<pre><code>binary_sensor\\.(?:(?:switch)|(?:button))\n</code></pre></p> <p>Filters must be enclosed in quotes and passed as a list: <pre><code>homeassistant:\n  host: ...\n  token: ...\n  filters: [\"binary_sensor\\.(?:(?:switch)|(?:button))\"]\n</code></pre></p>"},{"location":"modules/jellyfin/","title":"jellyfin","text":""},{"location":"modules/jellyfin/#jellyfin.Jellyfin","title":"<code>Jellyfin</code>","text":"PARAMETER DESCRIPTION <code>host</code> <p>Jellyfin server IP or FQDN</p> <p> TYPE: <code>str</code> </p> <code>token</code> <p>Jellyfin API token</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>Jellyfin server port</p> <p> TYPE: <code>int</code> DEFAULT: <code>443</code> </p> <code>scheme</code> <p>http or https</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https'</code> </p> <code>**kwargs</code> <p>See BaseModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p>"},{"location":"modules/libvirt/","title":"libvirt","text":""},{"location":"modules/libvirt/#libvirt.Libvirt","title":"<code>Libvirt</code>","text":"<p>Warning</p> <p>This module requires module <code>libvirt</code> to be installed. As this requires an external dependency, it must be installed explicitly after installing the missing dependency. See Installation.</p> PARAMETER DESCRIPTION <code>hypervisor_uri</code> <p>Local or             Remote hypervisor URIs</p> <p> TYPE: <code>str</code> DEFAULT: <code>'qemu:///system'</code> </p> <code>resource_usage</code> <p>CPU and RAM usage bars style</p> <p> TYPE: <code>Literal['none', 'auto', 'onerow', 'tworow']</code> DEFAULT: <code>'auto'</code> </p> <code>**kwargs</code> <p>See BaseModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> <p>Warning</p> <p>This module needs the user to be in the <code>libvirt</code> group to get sufficient permissions to connect to libvirt. If not present yet, the <code>libvirt</code> group has to be created. <pre><code>sudo addgroup libvirt\nsudo adduser $(whoami) libvirt\n</code></pre></p> <p>It's totally fine if the above command produce the following outputs: sudo addgroup libvirt<pre><code>fatal: The group `libvirt' already exists.\n</code></pre> sudo adduser $(whoami) libvirt<pre><code>info: The user `alessandro' is already a member of `libvirt'.\n</code></pre></p>"},{"location":"modules/nut/","title":"nut","text":""},{"location":"modules/nut/#nut.NUT","title":"<code>NUT</code>","text":"<p>Displays information about UPSes connected to a Network Ups Tools server.</p> PARAMETER DESCRIPTION <code>title</code> <p>if not set or null defaults to ups name if upsname is set</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>host</code> <p>NUT server IP or FQDN</p> <p> TYPE: <code>str</code> DEFAULT: <code>'localhost'</code> </p> <code>port</code> <p>NUT server port</p> <p> TYPE: <code>int</code> DEFAULT: <code>3493</code> </p> <code>upsname</code> <p>UPS name, if not set or null all UPSes will be shown</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>username</code> <p>NUT username</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>password</code> <p>NUT password</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p>Connection timeout seconds</p> <p> TYPE: <code>int</code> DEFAULT: <code>30</code> </p> <code>bars</code> <p>whether to show status bars on 1 or 2 lines or automatically ('auto', 0)</p> <p> TYPE: <code>Literal['auto', 0, 1, 2]</code> DEFAULT: <code>0</code> </p> <code>**kwargs</code> <p>See BaseModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p>"},{"location":"modules/octoprint/","title":"octoprint","text":""},{"location":"modules/octoprint/#octoprint.OctoPrint","title":"<code>OctoPrint</code>","text":"PARAMETER DESCRIPTION <code>host</code> <p>OctoPrint server IP or FQDN</p> <p> TYPE: <code>str</code> </p> <code>token</code> <p>OctoPrint API token</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>OctoPrint server port</p> <p> TYPE: <code>int</code> DEFAULT: <code>80</code> </p> <code>scheme</code> <p>http or https</p> <p> TYPE: <code>str</code> DEFAULT: <code>'http'</code> </p> <code>**kwargs</code> <p>See BaseModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> <p>Note</p> <p>This widget ignores <code>subtitle</code>, <code>subtitle_align</code>, <code>subtitle_background</code>, <code>subtitle_color</code> and <code>subtitle_style</code> because they are used internally to display status.</p>"},{"location":"modules/plugin/","title":"plugin","text":""},{"location":"modules/qbittorrent/","title":"qbittorrent","text":""},{"location":"modules/qbittorrent/#qbittorrent.QBitTorrent","title":"<code>QBitTorrent</code>","text":"PARAMETER DESCRIPTION <code>host</code> <p>qBittorrent server IP or FQDN</p> <p> TYPE: <code>str</code> </p> <code>username</code> <p>qBittorrent username</p> <p> TYPE: <code>str</code> </p> <code>password</code> <p>qBittorrent password</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>qBittorrent server port</p> <p> TYPE: <code>int</code> DEFAULT: <code>8080</code> </p> <code>scheme</code> <p>http or https</p> <p> TYPE: <code>str</code> DEFAULT: <code>'http'</code> </p> <code>sort</code> <p>See Sorting</p> <p> TYPE: <code>str | tuple[str, bool] | list[str | tuple[str, bool]]</code> DEFAULT: <code>('downloaded', False)</code> </p> <code>columns</code> <p>See Available columns</p> <p> TYPE: <code>list[str]</code> DEFAULT: <code>('state', 'progress', 'ratio', 'name')</code> </p> <code>human_readable</code> <p>Convert numbers to human readable strings</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>**kwargs</code> <p>See TableModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p>"},{"location":"modules/qbittorrent/#qbittorrent.QBitTorrent--available-columns","title":"Available columns:","text":"<p>Source: qBittorrent WebUI API</p> Name Description <code>added_on</code> Time (Unix Epoch) when the torrent was added to the client <code>amount_left</code> Amount of data left to download (bytes) <code>auto_tmm</code> Whether this torrent is managed by Automatic Torrent Management <code>availability</code> Percentage of file pieces currently available <code>category</code> Category of the torrent <code>completed</code> Amount of transfer data completed (bytes) <code>completion_on</code> Time (Unix Epoch) when the torrent completed <code>content_path</code> Absolute path of torrent content (root path for multifile torrents, absolute file path for singlefile torrents) <code>dl_limit</code> Torrent download speed limit (bytes/s). <code>-1</code> if unlimited. <code>dlspeed</code> Torrent download speed (bytes/s) <code>downloaded</code> Amount of data downloaded <code>downloaded_session</code> Amount of data downloaded this session <code>eta</code> Torrent ETA (seconds) <code>f_l_piece_prio</code> True if first last piece are prioritized <code>force_start</code> True if force start is enabled for this torrent <code>hash</code> Torrent hash <code>isPrivate</code> True if torrent is from a private tracker (added in 5.0.0) <code>last_activity</code> Last time (Unix Epoch) when a chunk was downloaded/uploaded <code>magnet_uri</code> Magnet URI corresponding to this torrent <code>max_ratio</code> Maximum share ratio until torrent is stopped from seeding/uploading <code>max_seeding_time</code> Maximum seeding time (seconds) until torrent is stopped from seeding <code>name</code> Torrent name <code>num_complete</code> Number of seeds in the swarm <code>num_incomplete</code> Number of leechers in the swarm <code>num_leechs</code> Number of leechers connected to <code>num_seeds</code> Number of seeds connected to <code>priority</code> Torrent priority. Returns -1 if queuing is disabled or torrent is in seed mode <code>progress</code> Torrent progress (percentage/100) <code>ratio</code> Torrent share ratio. Max ratio value: 9999. <code>ratio_limit</code> TODO (what is different from <code>max_ratio</code>?) <code>reannounce</code> Time until the next tracker reannounce <code>save_path</code> Path where this torrent's data is stored <code>seeding_time</code> Torrent elapsed time while complete (seconds) <code>seeding_time_limit</code> TODO (what is different from <code>max_seeding_time</code>?) seeding_time_limit is a per torrent setting, when Automatic Torrent Management is disabled, furthermore then max_seeding_time is set to seeding_time_limit for this torrent. If Automatic Torrent Management is enabled, the value is -2. And if max_seeding_time is unset it have a default value -1. <code>seen_complete</code> Time (Unix Epoch) when this torrent was last seen complete <code>seq_dl</code> True if sequential download is enabled <code>size</code> Total size (bytes) of files selected for download <code>state</code> Torrent state. See table here below for the possible values <code>super_seeding</code> True if super seeding is enabled <code>tags</code> Comma-concatenated tag list of the torrent <code>time_active</code> Total active time (seconds) <code>total_size</code> Total size (bytes) of all file in this torrent (including unselected ones) <code>tracker</code> The first tracker with working status. Returns empty string if no tracker is working. <code>up_limit</code> Torrent upload speed limit (bytes/s). <code>-1</code> if unlimited. <code>uploaded</code> Amount of data uploaded <code>uploaded_session</code> Amount of data uploaded this session <code>upspeed</code> Torrent upload speed (bytes/s)"},{"location":"modules/resourceusage/","title":"resourceusage","text":""},{"location":"modules/resourceusage/#resourceusage.ResourceUsage","title":"<code>ResourceUsage</code>","text":"PARAMETER DESCRIPTION <code>cpu_combined</code> <p>Combine all CPUs in a single bar</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>show_cpu</code> <p>Show CPU usage</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>show_mem</code> <p>Show RAM usage</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>show_swp</code> <p>Show swap usage</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>show_gpu</code> <p>Show GPU usage</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>**kwargs</code> <p>See BaseModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p>"},{"location":"modules/summary/","title":"Summary","text":"<ul> <li>apcupsd</li> <li>clock</li> <li>cmdrunner</li> <li>diskusage</li> <li>docker</li> <li>feedreader</li> <li>homeassistant</li> <li>jellyfin</li> <li>libvirt</li> <li>nut</li> <li>octoprint</li> <li>plugin</li> <li>qbittorrent</li> <li>resourceusage</li> <li>systemctl</li> <li>text</li> <li>textfile</li> <li>uptime</li> <li>vstack</li> <li>weather</li> </ul>"},{"location":"modules/systemctl/","title":"systemctl","text":""},{"location":"modules/systemctl/#systemctl.Systemctl","title":"<code>Systemctl</code>","text":"<p>Show the status of chosen systemd units (like services and timers) and list failed ones.</p> PARAMETER DESCRIPTION <code>units</code> <p>List of unit names to monitor</p> <p> TYPE: <code>list[str]</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>See BaseModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p>"},{"location":"modules/text/","title":"text","text":""},{"location":"modules/text/#text.Text","title":"<code>Text</code>","text":"<p>Display some static text.</p> <p>Note</p> <p>This widget totally ignores <code>refresh_interval</code>: static text does not need to be updated.</p> PARAMETER DESCRIPTION <code>text</code> <p>String to be printed</p> <p> TYPE: <code>str</code> </p> <code>mode</code> <p>One of \"plain\", \"rich\" or \"ansi\"</p> <p> TYPE: <code>Literal['plain', 'rich', 'ansi']</code> DEFAULT: <code>'plain'</code> </p> <code>style</code> <p>Base style for text</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>emoji</code> <p>Allow rendering emoji codes</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>emoji_variant</code> <p>Emoji variant, either \"text\" or \"emoji\"</p> <p> TYPE: <code>Literal['emoji', 'text']</code> DEFAULT: <code>None</code> </p> <code>justify</code> <p>Justify method: \"left\", \"center\", \"full\", \"right\"</p> <p> TYPE: <code>Literal['default', 'left', 'center', 'right', 'full']</code> DEFAULT: <code>None</code> </p> <code>overflow</code> <p>Overflow method: \"crop\", \"fold\", \"ellipsis\"</p> <p> TYPE: <code>Literal['fold', 'crop', 'ellipsis', 'ignore']</code> DEFAULT: <code>None</code> </p> <code>no_wrap</code> <p>Disable text wrapping</p> <p> TYPE: <code>bool</code> DEFAULT: <code>None</code> </p> <code>end</code> <p>Character to end text with</p> <p> TYPE: <code>str</code> DEFAULT: <code>'\\n'</code> </p> <code>tab_size</code> <p>Number of spaces per tab, or <code>None</code> to use <code>console.tab_size</code></p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>See BaseModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> <p>Available parameters for each mode:</p> Name \"plain\" \"rich\" \"ansi\" <code>style</code> \u2705 \u2705 \u2705 <code>emoji</code> \u274c \u2705 \u274c <code>emoji_variant</code> \u274c \u2705 \u274c <code>justify</code> \u2705 \u2705 \u2705 <code>overflow</code> \u2705 \u2705 \u2705 <code>no_wrap</code> \u2705 \u274c \u2705 <code>end</code> \u2705 \u2705 \u2705 <code>tab_size</code> \u2705 \u274c \u2705 <p>Info</p> <p>Parameters marked with \u274c will be ignored.</p>"},{"location":"modules/textfile/","title":"textfile","text":""},{"location":"modules/textfile/#textfile.TextFile","title":"<code>TextFile</code>","text":"<p>Display the content of a text file.</p> PARAMETER DESCRIPTION <code>title</code> <p>if not set or null defaults to file path</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>path</code> <p>Full path to file to be printed</p> <p> TYPE: <code>str</code> </p> <code>mode</code> <p>One of \"plain\", \"rich\" or \"ansi\"</p> <p> TYPE: <code>Literal['plain', 'rich', 'ansi']</code> DEFAULT: <code>'plain'</code> </p> <code>style</code> <p>Base style for text</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>emoji</code> <p>Allow rendering emoji codes</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>emoji_variant</code> <p>Emoji variant, either \"text\" or \"emoji\"</p> <p> TYPE: <code>Literal['emoji', 'text']</code> DEFAULT: <code>None</code> </p> <code>justify</code> <p>Justify method: \"left\", \"center\", \"full\", \"right\"</p> <p> TYPE: <code>Literal['default', 'left', 'center', 'right', 'full']</code> DEFAULT: <code>None</code> </p> <code>overflow</code> <p>Overflow method: \"crop\", \"fold\", \"ellipsis\"</p> <p> TYPE: <code>Literal['fold', 'crop', 'ellipsis', 'ignore']</code> DEFAULT: <code>None</code> </p> <code>no_wrap</code> <p>Disable text wrapping</p> <p> TYPE: <code>bool</code> DEFAULT: <code>None</code> </p> <code>end</code> <p>Character to end text with</p> <p> TYPE: <code>str</code> DEFAULT: <code>'\\n'</code> </p> <code>tab_size</code> <p>Number of spaces per tab, or <code>None</code> to use <code>console.tab_size</code></p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>See BaseModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> <p>Available parameters for each mode:</p> Name \"plain\" \"rich\" \"ansi\" <code>style</code> \u2705 \u2705 \u2705 <code>emoji</code> \u274c \u2705 \u274c <code>emoji_variant</code> \u274c \u2705 \u274c <code>justify</code> \u2705 \u2705 \u2705 <code>overflow</code> \u2705 \u2705 \u2705 <code>no_wrap</code> \u2705 \u274c \u2705 <code>end</code> \u2705 \u2705 \u2705 <code>tab_size</code> \u2705 \u274c \u2705 <p>Info</p> <p>Parameters marked with \u274c will be ignored.</p>"},{"location":"modules/uptime/","title":"uptime","text":""},{"location":"modules/uptime/#uptime.Uptime","title":"<code>Uptime</code>","text":"PARAMETER DESCRIPTION <code>compact</code> Value Result 0 or False 5 days, 4 hours, 3 minutes, 2 seconds 1 or True 5 d, 4 h, 3 m, 2 s 2 5d 04:03:02 <p> TYPE: <code>bool | Literal[0, 1, 2]</code> DEFAULT: <code>False</code> </p> <code>show_prefix</code> <p>Show \"uptime\" or \"up\" prefix</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>show_seconds</code> <p>Also show seconds</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>**kwargs</code> <p>See BaseModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p>"},{"location":"modules/vstack/","title":"vstack","text":""},{"location":"modules/vstack/#vstack.Vstack","title":"<code>Vstack</code>","text":"<p>Vertical stack of widgets that automatically fit content height.</p> <p>Info</p> <p>For better experience it's recommended to set <code>border: None</code> in <code>defaults:</code> to have all widgets inside one and only one border, appearing as a single widget. <pre><code>mods:\n    vstack:\n        defaults:\n            border: None\n        mods:\n            # ...\n</code></pre></p> PARAMETER DESCRIPTION <code>mods</code> <p>See Widget definitions</p> <p> TYPE: <code>dict[str, dict[str, Any]]</code> </p> <code>defaults</code> <p>See Defaults</p> <p> TYPE: <code>dict[str, Any]</code> DEFAULT: <code>None</code> </p> <code>order</code> <p>List of widget IDs to manually define widget order</p> <p> TYPE: <code>list[str]</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>See BaseModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p>"},{"location":"modules/weather/","title":"weather","text":""},{"location":"modules/weather/#weather.Weather","title":"<code>Weather</code>","text":"<p>See wttr.in/:help</p> PARAMETER DESCRIPTION <code>location</code> <p>See Supported location types</p> <p> TYPE: <code>str</code> </p> <code>language</code> <p>Show weather information in this language</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>narrow</code> <p>Show only day and night</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>metric</code> <p>Show units using the metric system (SI) (used by default everywhere except US)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>None</code> </p> <code>speed_in_m_s</code> <p>Show wind speed in m/s</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>today_forecast</code> <p>Show current weather and today forecast</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tomorrow_forecast</code> <p>Show current weather, today forecast and tomorrow forecast. If True, <code>today_forecast</code> will be ignored.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>quiet</code> <p>Be quiet: no \"Weather report\" text</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>show_city</code> <p>Super quiet: hide city name. Requires \"quiet=True\"</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>no_colors</code> <p>Disable colored output</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>console_glyphs</code> <p>If true disables use of advanced terminal features like emojis.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>**kwargs</code> <p>See BaseModule</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p>"},{"location":"modules/weather/#weather.Weather--supported-location-types","title":"Supported location types","text":"Example Description <code>paris</code> city name <code>~Eiffel+tower</code> any location (+ for spaces) <code>\u041c\u043e\u0441\u043a\u0432\u0430</code> Unicode name of any location in any language <code>muc</code> airport code (3 letters) <code>@stackoverflow.com</code> domain name <code>94107</code> area codes <code>-78.46,106.79</code> GPS coordinates <p>Location also supports moon phase information:</p> Example Description <code>moon</code> Moon phase (add ,+US or ,+France for these cities) <code>moon@2016-10-25</code> Moon phase for the date (@2016-10-25) <p>Warning</p> <p>Refer to wttr.in documentation for updated supported location types.</p>"}]}